# Wireshark Credential Hunting Display Filters
# Specialized Filters for Credential Extraction and Authentication Analysis

# ========================================
# HTTP CREDENTIAL HUNTING
# ========================================

# Basic HTTP POST Authentication
http.request.method == "POST"
http.request.method == "POST" and http contains "password"
http.request.method == "POST" and http contains "username"
http.request.method == "POST" and http contains "login"
http.request.method == "POST" and http contains "user"
http.request.method == "POST" and http contains "email"

# HTTP Authentication Headers
http.authorization
http.www_authenticate
http.proxy_authorization
http.proxy_authenticate

# HTTP Basic Authentication (Base64)
http.authbasic
http contains "Basic "

# HTTP Digest Authentication
http contains "Digest "
http.authdigest

# Form-based Login Detection
http contains "application/x-www-form-urlencoded"
http.content_type == "application/x-www-form-urlencoded"
http.file_data contains "password"
http.file_data contains "username"

# Common Login Endpoints
http.request.uri contains "login"
http.request.uri contains "signin"
http.request.uri contains "auth"
http.request.uri contains "authenticate"
http.request.uri contains "logon"

# Session and Cookie Analysis
http.cookie contains "session"
http.cookie contains "auth"
http.set_cookie contains "session"
http.set_cookie contains "auth"

# JSON Authentication Payloads
http contains "application/json" and frame contains "password"
http.content_type == "application/json" and frame contains "username"

# ========================================
# FTP CREDENTIAL EXTRACTION
# ========================================

# FTP Authentication Commands
ftp.request.command == "USER"
ftp.request.command == "PASS"
ftp.request.command == "USER" or ftp.request.command == "PASS"
ftp.request.command == "ACCT"

# FTP Response Codes for Authentication
ftp.response.code == 230   # Login successful
ftp.response.code == 331   # Username OK, need password
ftp.response.code == 430   # Invalid username or password
ftp.response.code == 530   # Login incorrect

# Anonymous FTP Detection
ftp.request.arg == "anonymous"
ftp.request.arg == "ftp"

# FTP over TLS/SSL
ftps or ftp.request.command == "AUTH"

# ========================================
# EMAIL PROTOCOL CREDENTIALS
# ========================================

# POP3 Authentication
pop.request.command == "USER"
pop.request.command == "PASS"
pop.request.command == "USER" or pop.request.command == "PASS"
pop.request.command == "APOP"

# IMAP Authentication
imap.request.command contains "LOGIN"
imap.request.command contains "AUTHENTICATE"
imap.response.status == "OK" and imap contains "LOGIN"

# SMTP Authentication
smtp.req.command == "AUTH"
smtp.req.command == "AUTH PLAIN"
smtp.req.command == "AUTH LOGIN"
smtp.response.code == 235   # Authentication successful
smtp.response.code == 535   # Authentication failed

# Exchange/Outlook Web Access
http.request.uri contains "owa"
http.request.uri contains "exchange"
http contains "X-OWA-Version"

# ========================================
# DATABASE CREDENTIALS
# ========================================

# MySQL Authentication
mysql.login_request
mysql.response.code == 0x00   # OK packet
mysql.response.code == 0xff   # Error packet

# PostgreSQL Authentication
pgsql
postgresql

# Microsoft SQL Server
tds
mssql

# Oracle Database
oracle

# ========================================
# NETWORK SERVICE AUTHENTICATION
# ========================================

# SSH Authentication Attempts
ssh.protocol contains "SSH-"
ssh and tcp.flags.syn == 1

# Telnet Login Sessions
telnet and frame contains "login:"
telnet and frame contains "Username:"
telnet and frame contains "Password:"

# RDP Authentication
rdp
rdp.type == 1
tcp.port == 3389

# VNC Authentication
vnc
vnc.server_message_type == 1

# ========================================
# LDAP AND DIRECTORY SERVICES
# ========================================

# LDAP Bind Operations
ldap.sasl_mechanism
ldap.authentication == 0   # Simple authentication
ldap.authentication == 3   # SASL authentication
ldap.bindRequest
ldap.bindResponse

# Active Directory
ldap.baseObject contains "dc="
kerberos

# ========================================
# WEB APPLICATION SPECIFIC
# ========================================

# WordPress Login
http.request.uri contains "wp-login.php"
http.request.uri contains "wp-admin"

# Drupal Authentication
http.request.uri contains "drupal"
http.request.uri contains "user/login"

# Joomla Login
http.request.uri contains "administrator"
http contains "joomla"

# SharePoint Authentication
http.request.uri contains "sharepoint"
http.request.uri contains "_layouts"

# Generic CMS Patterns
http.request.uri contains "admin"
http.request.uri contains "administrator"
http.request.uri contains "backend"

# ========================================
# API AUTHENTICATION
# ========================================

# API Key Detection
http.authorization contains "Bearer"
http.authorization contains "Token"
http.authorization contains "API"
frame contains "api_key"
frame contains "access_token"
frame contains "auth_token"

# OAuth Authentication
http.request.uri contains "oauth"
http contains "grant_type"
frame contains "client_secret"
frame contains "client_id"

# REST API Authentication
http.content_type == "application/json" and frame contains "token"
http.request.method == "POST" and http.request.uri contains "api"

# ========================================
# LEGACY PROTOCOL CREDENTIALS
# ========================================

# SNMP Community Strings
snmp.community != "public"
snmp.community != "private"
snmp and frame contains "community"

# NFS Authentication
nfs
portmap

# NetBIOS/SMB Authentication
nbss
smb.cmd == 0x73   # Session Setup AndX
smb2.cmd == 1     # Session Setup
smb.nt_status != 0x00000000

# ========================================
# CUSTOM PATTERN DETECTION
# ========================================

# Common Password Patterns
frame contains "passwd"
frame contains "secret"
frame contains "key"
frame contains "token"
frame contains "credential"

# Base64 Encoded Credentials
frame matches ".*[A-Za-z0-9+/]{20,}={0,2}.*"

# Credit Card Numbers (PCI Compliance)
frame matches "4[0-9]{12}(?:[0-9]{3})?"     # Visa
frame matches "5[1-5][0-9]{14}"             # MasterCard
frame matches "3[47][0-9]{13}"              # American Express

# Social Security Numbers
frame matches "[0-9]{3}-[0-9]{2}-[0-9]{4}"

# Email Addresses
frame matches "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}"

# ========================================
# ADVANCED CREDENTIAL HUNTING
# ========================================

# Multi-Protocol Credential Search
(http.request.method == "POST" and frame contains "password") or (ftp.request.command == "PASS") or (pop.request.command == "PASS")

# Encrypted vs Unencrypted Authentication
not ssl and (frame contains "password" or frame contains "username")

# Failed Authentication Attempts
(http.response.code == 401 or http.response.code == 403) or (ftp.response.code == 530) or (smtp.response.code == 535)

# Credential Brute Force Detection
tcp.analysis.retransmission and (frame contains "password" or ftp.request.command == "PASS")

# Session Hijacking Indicators
http.cookie and tcp.seq != tcp.nxtseq

# ========================================
# COMPLIANCE AND FORENSIC FILTERS
# ========================================

# PCI-DSS Compliance Monitoring
frame matches "4[0-9]{12}" or frame matches "5[1-5][0-9]{14}"
tcp.port == 443 and frame contains "4[0-9]{12}"

# HIPAA Healthcare Data
frame contains "patient" or frame contains "medical"
frame contains "SSN" or frame contains "DOB"

# GDPR Personal Data Detection
frame contains "email" or frame contains "@"
frame contains "name" and frame contains "address"

# Financial Services Monitoring
frame contains "account" and frame contains "number"
frame contains "routing" and frame contains "sort"

# ========================================
# TIME-BASED CREDENTIAL HUNTING
# ========================================

# Off-hours Authentication (customize times)
(frame.time >= "18:00:00" or frame.time <= "09:00:00") and frame contains "password"

# Weekend Access (customize days)
frame.time matches "Sat|Sun" and (http.authorization or ftp.request.command == "PASS")

# Rapid Authentication Attempts
tcp.time_delta < 0.1 and frame contains "password"

# ========================================
# GEOGRAPHIC CREDENTIAL ANALYSIS
# ========================================

# Unusual Geographic Access (requires GeoIP database)
ip.geoip.country != "US" and frame contains "login"
ip.geoip.country == "CN" or ip.geoip.country == "RU"

# VPN/Proxy Detection
ip.geoip.asn contains "vpn" or ip.geoip.asn contains "proxy"

# ========================================
# MOBILE AND WIRELESS CREDENTIALS
# ========================================

# WiFi Authentication
eap
radius
wpa

# Mobile App Authentication
frame contains "deviceid" or frame contains "udid"
frame contains "android" or frame contains "ios"

# ========================================
# SPECIALIZED FILTERS FOR SPECIFIC TOOLS
# ========================================

# For use with credential extraction tools
http.request.method == "POST" and http.file_data

# For timeline analysis
frame.time_epoch and frame contains "password"

# For statistical analysis
tcp.stream and frame contains "credential"

# ========================================
# FILTER COMBINATION EXAMPLES
# ========================================

# Comprehensive credential hunt
(http.request.method == "POST" and frame contains "password") or (ftp.request.command == "USER" or ftp.request.command == "PASS") or (pop.request.command == "USER" or pop.request.command == "PASS") or (imap.request.command contains "LOGIN") or (smtp.req.command == "AUTH")

# Unencrypted credentials only
not ssl and not tls and ((frame contains "password") or (ftp.request.command == "PASS") or (pop.request.command == "PASS"))

# Failed authentication analysis
((http.response.code == 401) or (http.response.code == 403) or (ftp.response.code == 530) or (smtp.response.code == 535) or (pop.response.indicator == "-ERR"))

# ========================================
# USAGE NOTES
# ========================================

# 1. Apply filters incrementally - start broad, then narrow down
# 2. Use these filters with follow TCP stream for complete context
# 3. Combine with statistical analysis for pattern detection
# 4. Save frequently used combinations as filter buttons
# 5. Always verify automated findings manually
# 6. Document packet numbers for evidence trail
# 7. Consider legal and ethical implications of credential monitoring

# Filter Performance Tips:
# - More specific protocols first: http.request.method == "POST" and frame contains "password"
# - Rather than: frame contains "password" and http.request.method == "POST"
# - Use display filters for analysis, capture filters for collection
# - Regular expressions are slower - use sparingly

# Last Updated: 2024-09-18
# Version: 2.1
# Maintainer: Network Security Team